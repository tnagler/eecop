% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bootstrap.R
\name{eecop_boot}
\alias{eecop_boot}
\alias{predict.eecop_boot}
\alias{conf_int}
\title{Bootstrapping eecop models}
\usage{
eecop_boot(object, n_boot = 100, rxi = stats::rexp, cores = 1)

\method{predict}{eecop_boot}(
  object,
  x,
  type = "expectile",
  t = 0.5,
  trafo = function(y) y,
  cores = 1,
  ...
)

conf_int(
  object,
  x,
  type = "expectile",
  t = 0.5,
  trafo = function(y) y,
  conf = 0.9,
  cores = 1,
  ...
)
}
\arguments{
\item{object}{a fitted \link{eecop} object.}

\item{n_boot}{number of bootstrap replicates.}

\item{rxi}{a function generating bootstrap multipliers; the function needs to
take the number of samples as its first argument and return a numeric
vector of this length. Default is \code{\link[=rexp]{rexp()}}, which corresponds to the
'Bayesian bootstrap'. Note that, for the theory to work,
one should normalize so that \code{E(rxi) = var(rxi) = 1}, e.g.
with \code{function(n) {xi <- rxi(n); return((xi - mean(xi)) / sd(xi) + 1)}}.}

\item{cores}{an integer for the number of cores to use; if \code{cores > 1},
estimation will be parallelized
within over \code{n_boot} (using \code{\link[parallel:clusterApply]{parallel::parLapply()}}).}

\item{x}{covariate values to predict on; must match the format used for
fitting the \code{eecop()} model.}

\item{type}{either \code{"quantile"}, \code{"expectile"}, \code{"mean"}, or \code{"variance"}.}

\item{t}{a vector of quantile/expectile levels.}

\item{trafo}{a function with signature \verb{function(y)} with \code{y} the
response (vector or matrix). The function should return a
vector of length \code{NROW(object$y)} or a matrix with \code{NROW(object$y)} rows.}

\item{...}{unused.}

\item{conf}{confidence level.}
}
\value{
An objecvt of class \code{eccop_boot} containing the original \link{eecop}
object and bootstrap replicates.
}
\description{
Given a fitted model for the weight function, \code{\link[=eecop_boot]{eecop_boot()}} generates a
number of bootstrap replicates from this model. A multiplier bootstrap
procedure is used. The result can be passed to \code{\link[=predict.eecop_boot]{predict.eecop_boot()}} to
generate bootstrapped predictions, or \code{\link[=conf_int]{conf_int()}} to compute confidence
intervals directly.
}
\examples{
# model with continuous variables
x <- matrix(rnorm(200), 100, 2)
y <- rowSums(x) + rnorm(100)

fit <- eecop(y, x)

bs_fits <- eecop_boot(fit, n_boot = 2)
preds <- predict(bs_fits, x[1:3, ])
CI <- conf_int(bs_fits, x[1:3, ], type = "quantile", t = c(0.5, 0.9))
}
\seealso{
\code{\link[=eecop]{eecop()}}, \code{\link[=predict.eecop_boot]{predict.eecop_boot()}}
}
